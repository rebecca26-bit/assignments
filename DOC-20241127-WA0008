{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Personal Scheduling Assistant ---\n",
      "1. Add Task\n",
      "2. View Upcoming Tasks\n",
      "3. Schedule Tasks\n",
      "4. Analyze Task Density\n",
      "5. Search Task by Deadline\n",
      "6. Exit\n",
      "Enter your tasks. Type 'done' when finished.\n",
      "Task 'finish research paper' added.\n",
      "\n",
      "Task 'Buy groceries' added.\n",
      "\n",
      "Task 'review lecture notes' added.\n",
      "\n",
      "Task 'watch movie' added.\n",
      "\n",
      "Task '2' added.\n",
      "\n",
      "\n",
      "--- Personal Scheduling Assistant ---\n",
      "1. Add Task\n",
      "2. View Upcoming Tasks\n",
      "3. Schedule Tasks\n",
      "4. Analyze Task Density\n",
      "5. Search Task by Deadline\n",
      "6. Exit\n",
      "\n",
      "Upcoming Tasks:\n",
      "finish research paper (academic) - Priority: 1, Due: 2024-12-05 23:59, Duration: 180 min\n",
      "Buy groceries (personal) - Priority: 2, Due: 2024-12-07 18:00, Duration: 60 min\n",
      "review lecture notes (academic) - Priority: 3, Due: 2024-12-10 20:00, Duration: 90 min\n",
      "watch movie (personal) - Priority: 4, Due: 2024-12-12 22:00, Duration: 120 min\n",
      "2 (personal) - Priority: 5, Due: 2024-12-13 17:00, Duration: 60 min\n",
      "\n",
      "--- Personal Scheduling Assistant ---\n",
      "1. Add Task\n",
      "2. View Upcoming Tasks\n",
      "3. Schedule Tasks\n",
      "4. Analyze Task Density\n",
      "5. Search Task by Deadline\n",
      "6. Exit\n",
      "\n",
      "Scheduled Tasks:\n",
      "finish research paper (academic) - Priority: 1, Due: 2024-12-05 23:59, Duration: 180 min\n",
      "Buy groceries (personal) - Priority: 2, Due: 2024-12-07 18:00, Duration: 60 min\n",
      "review lecture notes (academic) - Priority: 3, Due: 2024-12-10 20:00, Duration: 90 min\n",
      "watch movie (personal) - Priority: 4, Due: 2024-12-12 22:00, Duration: 120 min\n",
      "2 (personal) - Priority: 5, Due: 2024-12-13 17:00, Duration: 60 min\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Personal Scheduling Assistant ---\n",
      "1. Add Task\n",
      "2. View Upcoming Tasks\n",
      "3. Schedule Tasks\n",
      "4. Analyze Task Density\n",
      "5. Search Task by Deadline\n",
      "6. Exit\n",
      "\n",
      "Task Density Analysis:\n",
      "2024-12-05 23:59: 1 tasks\n",
      "2024-12-06 00:59: 0 tasks\n",
      "2024-12-06 01:59: 0 tasks\n",
      "2024-12-06 02:59: 0 tasks\n",
      "2024-12-06 03:59: 0 tasks\n",
      "2024-12-06 04:59: 0 tasks\n",
      "2024-12-06 05:59: 0 tasks\n",
      "2024-12-06 06:59: 0 tasks\n",
      "2024-12-06 07:59: 0 tasks\n",
      "2024-12-06 08:59: 0 tasks\n",
      "2024-12-06 09:59: 0 tasks\n",
      "2024-12-06 10:59: 0 tasks\n",
      "2024-12-06 11:59: 0 tasks\n",
      "2024-12-06 12:59: 0 tasks\n",
      "2024-12-06 13:59: 0 tasks\n",
      "2024-12-06 14:59: 0 tasks\n",
      "2024-12-06 15:59: 0 tasks\n",
      "2024-12-06 16:59: 0 tasks\n",
      "2024-12-06 17:59: 0 tasks\n",
      "2024-12-06 18:59: 0 tasks\n",
      "2024-12-06 19:59: 0 tasks\n",
      "2024-12-06 20:59: 0 tasks\n",
      "2024-12-06 21:59: 0 tasks\n",
      "2024-12-06 22:59: 0 tasks\n",
      "2024-12-06 23:59: 0 tasks\n",
      "2024-12-07 00:59: 0 tasks\n",
      "2024-12-07 01:59: 0 tasks\n",
      "2024-12-07 02:59: 0 tasks\n",
      "2024-12-07 03:59: 0 tasks\n",
      "2024-12-07 04:59: 0 tasks\n",
      "2024-12-07 05:59: 0 tasks\n",
      "2024-12-07 06:59: 0 tasks\n",
      "2024-12-07 07:59: 0 tasks\n",
      "2024-12-07 08:59: 0 tasks\n",
      "2024-12-07 09:59: 0 tasks\n",
      "2024-12-07 10:59: 0 tasks\n",
      "2024-12-07 11:59: 0 tasks\n",
      "2024-12-07 12:59: 0 tasks\n",
      "2024-12-07 13:59: 0 tasks\n",
      "2024-12-07 14:59: 0 tasks\n",
      "2024-12-07 15:59: 0 tasks\n",
      "2024-12-07 16:59: 0 tasks\n",
      "2024-12-07 17:59: 1 tasks\n",
      "2024-12-07 18:59: 0 tasks\n",
      "2024-12-07 19:59: 0 tasks\n",
      "2024-12-07 20:59: 0 tasks\n",
      "2024-12-07 21:59: 0 tasks\n",
      "2024-12-07 22:59: 0 tasks\n",
      "2024-12-07 23:59: 0 tasks\n",
      "2024-12-08 00:59: 0 tasks\n",
      "2024-12-08 01:59: 0 tasks\n",
      "2024-12-08 02:59: 0 tasks\n",
      "2024-12-08 03:59: 0 tasks\n",
      "2024-12-08 04:59: 0 tasks\n",
      "2024-12-08 05:59: 0 tasks\n",
      "2024-12-08 06:59: 0 tasks\n",
      "2024-12-08 07:59: 0 tasks\n",
      "2024-12-08 08:59: 0 tasks\n",
      "2024-12-08 09:59: 0 tasks\n",
      "2024-12-08 10:59: 0 tasks\n",
      "2024-12-08 11:59: 0 tasks\n",
      "2024-12-08 12:59: 0 tasks\n",
      "2024-12-08 13:59: 0 tasks\n",
      "2024-12-08 14:59: 0 tasks\n",
      "2024-12-08 15:59: 0 tasks\n",
      "2024-12-08 16:59: 0 tasks\n",
      "2024-12-08 17:59: 0 tasks\n",
      "2024-12-08 18:59: 0 tasks\n",
      "2024-12-08 19:59: 0 tasks\n",
      "2024-12-08 20:59: 0 tasks\n",
      "2024-12-08 21:59: 0 tasks\n",
      "2024-12-08 22:59: 0 tasks\n",
      "2024-12-08 23:59: 0 tasks\n",
      "2024-12-09 00:59: 0 tasks\n",
      "2024-12-09 01:59: 0 tasks\n",
      "2024-12-09 02:59: 0 tasks\n",
      "2024-12-09 03:59: 0 tasks\n",
      "2024-12-09 04:59: 0 tasks\n",
      "2024-12-09 05:59: 0 tasks\n",
      "2024-12-09 06:59: 0 tasks\n",
      "2024-12-09 07:59: 0 tasks\n",
      "2024-12-09 08:59: 0 tasks\n",
      "2024-12-09 09:59: 0 tasks\n",
      "2024-12-09 10:59: 0 tasks\n",
      "2024-12-09 11:59: 0 tasks\n",
      "2024-12-09 12:59: 0 tasks\n",
      "2024-12-09 13:59: 0 tasks\n",
      "2024-12-09 14:59: 0 tasks\n",
      "2024-12-09 15:59: 0 tasks\n",
      "2024-12-09 16:59: 0 tasks\n",
      "2024-12-09 17:59: 0 tasks\n",
      "2024-12-09 18:59: 0 tasks\n",
      "2024-12-09 19:59: 0 tasks\n",
      "2024-12-09 20:59: 0 tasks\n",
      "2024-12-09 21:59: 0 tasks\n",
      "2024-12-09 22:59: 0 tasks\n",
      "2024-12-09 23:59: 0 tasks\n",
      "2024-12-10 00:59: 0 tasks\n",
      "2024-12-10 01:59: 0 tasks\n",
      "2024-12-10 02:59: 0 tasks\n",
      "2024-12-10 03:59: 0 tasks\n",
      "2024-12-10 04:59: 0 tasks\n",
      "2024-12-10 05:59: 0 tasks\n",
      "2024-12-10 06:59: 0 tasks\n",
      "2024-12-10 07:59: 0 tasks\n",
      "2024-12-10 08:59: 0 tasks\n",
      "2024-12-10 09:59: 0 tasks\n",
      "2024-12-10 10:59: 0 tasks\n",
      "2024-12-10 11:59: 0 tasks\n",
      "2024-12-10 12:59: 0 tasks\n",
      "2024-12-10 13:59: 0 tasks\n",
      "2024-12-10 14:59: 0 tasks\n",
      "2024-12-10 15:59: 0 tasks\n",
      "2024-12-10 16:59: 0 tasks\n",
      "2024-12-10 17:59: 0 tasks\n",
      "2024-12-10 18:59: 0 tasks\n",
      "2024-12-10 19:59: 1 tasks\n",
      "2024-12-10 20:59: 0 tasks\n",
      "2024-12-10 21:59: 0 tasks\n",
      "2024-12-10 22:59: 0 tasks\n",
      "2024-12-10 23:59: 0 tasks\n",
      "2024-12-11 00:59: 0 tasks\n",
      "2024-12-11 01:59: 0 tasks\n",
      "2024-12-11 02:59: 0 tasks\n",
      "2024-12-11 03:59: 0 tasks\n",
      "2024-12-11 04:59: 0 tasks\n",
      "2024-12-11 05:59: 0 tasks\n",
      "2024-12-11 06:59: 0 tasks\n",
      "2024-12-11 07:59: 0 tasks\n",
      "2024-12-11 08:59: 0 tasks\n",
      "2024-12-11 09:59: 0 tasks\n",
      "2024-12-11 10:59: 0 tasks\n",
      "2024-12-11 11:59: 0 tasks\n",
      "2024-12-11 12:59: 0 tasks\n",
      "2024-12-11 13:59: 0 tasks\n",
      "2024-12-11 14:59: 0 tasks\n",
      "2024-12-11 15:59: 0 tasks\n",
      "2024-12-11 16:59: 0 tasks\n",
      "2024-12-11 17:59: 0 tasks\n",
      "2024-12-11 18:59: 0 tasks\n",
      "2024-12-11 19:59: 0 tasks\n",
      "2024-12-11 20:59: 0 tasks\n",
      "2024-12-11 21:59: 0 tasks\n",
      "2024-12-11 22:59: 0 tasks\n",
      "2024-12-11 23:59: 0 tasks\n",
      "2024-12-12 00:59: 0 tasks\n",
      "2024-12-12 01:59: 0 tasks\n",
      "2024-12-12 02:59: 0 tasks\n",
      "2024-12-12 03:59: 0 tasks\n",
      "2024-12-12 04:59: 0 tasks\n",
      "2024-12-12 05:59: 0 tasks\n",
      "2024-12-12 06:59: 0 tasks\n",
      "2024-12-12 07:59: 0 tasks\n",
      "2024-12-12 08:59: 0 tasks\n",
      "2024-12-12 09:59: 0 tasks\n",
      "2024-12-12 10:59: 0 tasks\n",
      "2024-12-12 11:59: 0 tasks\n",
      "2024-12-12 12:59: 0 tasks\n",
      "2024-12-12 13:59: 0 tasks\n",
      "2024-12-12 14:59: 0 tasks\n",
      "2024-12-12 15:59: 0 tasks\n",
      "2024-12-12 16:59: 0 tasks\n",
      "2024-12-12 17:59: 0 tasks\n",
      "2024-12-12 18:59: 0 tasks\n",
      "2024-12-12 19:59: 0 tasks\n",
      "2024-12-12 20:59: 0 tasks\n",
      "2024-12-12 21:59: 1 tasks\n",
      "2024-12-12 22:59: 0 tasks\n",
      "2024-12-12 23:59: 0 tasks\n",
      "2024-12-13 00:59: 0 tasks\n",
      "2024-12-13 01:59: 0 tasks\n",
      "2024-12-13 02:59: 0 tasks\n",
      "2024-12-13 03:59: 0 tasks\n",
      "2024-12-13 04:59: 0 tasks\n",
      "2024-12-13 05:59: 0 tasks\n",
      "2024-12-13 06:59: 0 tasks\n",
      "2024-12-13 07:59: 0 tasks\n",
      "2024-12-13 08:59: 0 tasks\n",
      "2024-12-13 09:59: 0 tasks\n",
      "2024-12-13 10:59: 0 tasks\n",
      "2024-12-13 11:59: 0 tasks\n",
      "2024-12-13 12:59: 0 tasks\n",
      "2024-12-13 13:59: 0 tasks\n",
      "2024-12-13 14:59: 0 tasks\n",
      "2024-12-13 15:59: 0 tasks\n",
      "2024-12-13 16:59: 1 tasks\n",
      "\n",
      "--- Personal Scheduling Assistant ---\n",
      "1. Add Task\n",
      "2. View Upcoming Tasks\n",
      "3. Schedule Tasks\n",
      "4. Analyze Task Density\n",
      "5. Search Task by Deadline\n",
      "6. Exit\n",
      "Task found: finish research paper (academic) - Priority: 1, Due: 2024-12-05 23:59, Duration: 180 min\n",
      "\n",
      "--- Personal Scheduling Assistant ---\n",
      "1. Add Task\n",
      "2. View Upcoming Tasks\n",
      "3. Schedule Tasks\n",
      "4. Analyze Task Density\n",
      "5. Search Task by Deadline\n",
      "6. Exit\n",
      "Exiting the program.\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime, timedelta\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Task class definition\n",
    "class Task:\n",
    "    def __init__(self, name, task_type, deadline, priority, duration):\n",
    "        self.name = name\n",
    "        self.task_type = task_type  # \"personal\" or \"academic\"\n",
    "        self.deadline = deadline  # datetime object\n",
    "        self.priority = priority  # Integer priority level\n",
    "        self.duration = duration  # Duration in minutes\n",
    "\n",
    "    def __repr__(self):\n",
    "        return f\"{self.name} ({self.task_type}) - Priority: {self.priority}, Due: {self.deadline.strftime('%Y-%m-%d %H:%M')}, Duration: {self.duration} min\"\n",
    "\n",
    "# TaskManager class with scheduling and retrieval methods\n",
    "class TaskManager:\n",
    "    def __init__(self):\n",
    "        self.tasks = []  # Min-heap for priority-based task sorting\n",
    "        self.schedule = []  # List of scheduled tasks\n",
    "\n",
    "    def add_task(self, task):\n",
    "        self.tasks.append([task.priority, task.deadline, task])\n",
    "\n",
    "    def get_upcoming_tasks(self):\n",
    "        \"\"\"Retrieve tasks sorted by deadline.\"\"\"\n",
    "        return [task for _, _, task in sorted(self.tasks, key=lambda x: x[1])]\n",
    "\n",
    "    def schedule_tasks(self):\n",
    "        \"\"\"Uses dynamic programming to find optimal task order within the given time constraints.\"\"\"\n",
    "        current_time = datetime.now()\n",
    "        scheduled_tasks = []\n",
    "        \n",
    "        for priority, deadline, task in sorted(self.tasks, key=lambda x: (x[0], x[1])):\n",
    "            if current_time + timedelta(minutes=task.duration) <= deadline:\n",
    "                scheduled_tasks.append(task)\n",
    "                current_time += timedelta(minutes=task.duration)\n",
    "        \n",
    "        self.schedule = scheduled_tasks\n",
    "        return self.schedule\n",
    "\n",
    "# Merge sort for sorting tasks by a given attribute\n",
    "def merge_sort(tasks, key):\n",
    "    if len(tasks) <= 1:\n",
    "        return tasks\n",
    "    mid = len(tasks) // 2\n",
    "    left = merge_sort(tasks[:mid], key)\n",
    "    right = merge_sort(tasks[mid:], key)\n",
    "    return merge(left, right, key)\n",
    "\n",
    "def merge(left, right, key):\n",
    "    sorted_tasks = []\n",
    "    while left and right:\n",
    "        if getattr(left[0], key) <= getattr(right[0], key):\n",
    "            sorted_tasks.append(left.pop(0))\n",
    "        else:\n",
    "            sorted_tasks.append(right.pop(0))\n",
    "    sorted_tasks.extend(left if left else right)\n",
    "    return sorted_tasks\n",
    "\n",
    "# Binary search for finding tasks by deadline\n",
    "def binary_search(tasks, target_deadline):\n",
    "    \"\"\"Binary search for finding tasks with a specific deadline or closest deadline.\"\"\"\n",
    "    tasks = sorted(tasks, key=lambda x: x.deadline)  # Ensure tasks are sorted by deadline\n",
    "    low, high = 0, len(tasks) - 1\n",
    "    while low <= high:\n",
    "        mid = (low + high) // 2\n",
    "        if tasks[mid].deadline == target_deadline:\n",
    "            return tasks[mid]\n",
    "        elif tasks[mid].deadline < target_deadline:\n",
    "            low = mid + 1\n",
    "        else:\n",
    "            high = mid - 1\n",
    "    return tasks[low] if low < len(tasks) else None\n",
    "\n",
    "# Task density analysis\n",
    "def analyze_task_density(tasks, interval_minutes=60):\n",
    "    \"\"\"Analyze time intervals to see where task density is highest.\"\"\"\n",
    "    intervals = {}\n",
    "    start_time = min(task.deadline for task in tasks)\n",
    "    end_time = max(task.deadline for task in tasks)\n",
    "    interval = timedelta(minutes=interval_minutes)\n",
    "    \n",
    "    while start_time <= end_time:\n",
    "        count = sum(1 for task in tasks if start_time <= task.deadline < start_time + interval)\n",
    "        intervals[start_time.strftime('%Y-%m-%d %H:%M')] = count\n",
    "        start_time += interval\n",
    "    \n",
    "    return intervals\n",
    "\n",
    "# Gantt chart visualization for tasks\n",
    "def plot_gantt_chart(tasks):\n",
    "    fig, gnt = plt.subplots()\n",
    "    gnt.set_ylim(0, 50)\n",
    "    gnt.set_xlim(min(task.deadline for task in tasks), max(task.deadline for task in tasks) + timedelta(minutes=60))\n",
    "    gnt.set_yticks([15, 25])\n",
    "    gnt.set_yticklabels(['Academic', 'Personal'])\n",
    "    gnt.set_xlabel('Time')\n",
    "    gnt.set_title('Task Schedule Gantt Chart')\n",
    "    \n",
    "    for task in tasks:\n",
    "        start = task.deadline - timedelta(minutes=task.duration)\n",
    "        gnt.broken_barh([(start, timedelta(minutes=task.duration))], (15 if task.task_type == \"academic\" else 25, 9),\n",
    "                        facecolors=('tab:blue' if task.task_type == \"academic\" else 'tab:orange'))\n",
    "    \n",
    "    plt.show()\n",
    "\n",
    "# Function to prompt the user to input tasks\n",
    "def get_user_input(manager):\n",
    "    print(\"Enter your tasks. Type 'done' when finished.\")\n",
    "    \n",
    "    while True:\n",
    "        name = input(\"Task name (or type 'done' to finish): \")\n",
    "        if name.lower() == 'done':\n",
    "            break\n",
    "\n",
    "        task_type = input(\"Task type (academic/personal): \").strip().lower()\n",
    "        while task_type not in ['academic', 'personal']:\n",
    "            task_type = input(\"Please enter a valid task type (academic/personal): \").strip().lower()\n",
    "\n",
    "        # Deadline input with error handling\n",
    "        while True:\n",
    "            deadline_str = input(\"Deadline (YYYY-MM-DD HH:MM): \")\n",
    "            try:\n",
    "                deadline = datetime.strptime(deadline_str, '%Y-%m-%d %H:%M')\n",
    "                break\n",
    "            except ValueError:\n",
    "                print(\"Invalid format. Please enter the deadline in the format YYYY-MM-DD HH:MM\")\n",
    "\n",
    "        priority = int(input(\"Priority (1 for highest priority): \"))\n",
    "        duration = int(input(\"Duration in minutes: \"))\n",
    "\n",
    "        # Create a task object and add it to the manager\n",
    "        task = Task(name, task_type, deadline, priority, duration)\n",
    "        manager.add_task(task)\n",
    "        print(f\"Task '{name}' added.\\n\")\n",
    "\n",
    "# Menu function for user interaction\n",
    "def display_menu(manager):\n",
    "    while True:\n",
    "        print(\"\\n--- Personal Scheduling Assistant ---\")\n",
    "        print(\"1. Add Task\")\n",
    "        print(\"2. View Upcoming Tasks\")\n",
    "        print(\"3. Schedule Tasks\")\n",
    "        print(\"4. Analyze Task Density\")\n",
    "        print(\"5. Search Task by Deadline\")\n",
    "        print(\"6. Exit\")\n",
    "        \n",
    "        choice = input(\"Enter your choice (1-6): \")\n",
    "\n",
    "        if choice == '1':\n",
    "            get_user_input(manager)\n",
    "        elif choice == '2':\n",
    "            upcoming_tasks = manager.get_upcoming_tasks()\n",
    "            print(\"\\nUpcoming Tasks:\")\n",
    "            for task in upcoming_tasks:\n",
    "                print(task)\n",
    "        elif choice == '3':\n",
    "            scheduled_tasks = manager.schedule_tasks()\n",
    "            print(\"\\nScheduled Tasks:\")\n",
    "            for task in scheduled_tasks:\n",
    "                print(task)\n",
    "            plot_gantt_chart(scheduled_tasks)\n",
    "        elif choice == '4':\n",
    "            density_analysis = analyze_task_density(manager.schedule)\n",
    "            print(\"\\nTask Density Analysis:\")\n",
    "            for time_slot, count in density_analysis.items():\n",
    "                print(f\"{time_slot}: {count} tasks\")\n",
    "        elif choice == '5':\n",
    "            # Search task by deadline\n",
    "            if not manager.tasks:\n",
    "                print(\"No tasks available to search.\")\n",
    "                continue\n",
    "            \n",
    "            deadline_str = input(\"Enter the deadline to search for (YYYY-MM-DD HH:MM): \")\n",
    "            try:\n",
    "                target_deadline = datetime.strptime(deadline_str, '%Y-%m-%d %H:%M')\n",
    "            except ValueError:\n",
    "                print(\"Invalid format. Please enter the deadline in the format YYYY-MM-DD HH:MM\")\n",
    "                continue\n",
    "            \n",
    "            tasks = [task[2] for task in manager.tasks]\n",
    "            found_task = binary_search(tasks, target_deadline)\n",
    "            \n",
    "            if found_task:\n",
    "                print(f\"Task found: {found_task}\")\n",
    "            else:\n",
    "                print(\"No task found with the specified deadline.\")\n",
    "        elif choice == '6':\n",
    "            print(\"Exiting the program.\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice. Please select a valid option.\")\n",
    "\n",
    "# Main function to run the scheduling assistant\n",
    "def main():\n",
    "    manager = TaskManager()\n",
    "    display_menu(manager)\n",
    "\n",
    "# Run the main function\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
